# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - apk update
    - apk add git
    - |
      if [ "$SCHEDULED" = true ] ; then
        # If this is triggered as a scheduled job, check if the version has changed
        VER="$(wget -qO- http://www.blisshq.com/app/latest-linux-version)"
        if [ "$(cat bliss-version)" != "$VER" ] ; then
          # If version has changed, update bliss-version and push
          echo "$VER" > bliss-version
          git config --global user.email "$CI_EMAIL"
          git config --global user.name 'CI/CD auto-bump'
          git add bliss-version
          git commit -m "Bump bliss version"
          git remote rm origin && git remote add origin https://"$CI_USERNAME":"$CI_PASSWORD"@gitlab.com/$CI_PROJECT_PATH.git
          git push origin HEAD:$CI_COMMIT_REF_NAME # Pushes to the same branch as the trigger
        else
          # Otherwise don't!
          echo "Version is unchanged ("$VER")"
        fi
        # Either way, exit - if there's been a version bump, the push will trigger another job
        exit 0
      fi
    - docker login -u "$CI_REGISTRY_USERNAME" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - git remote rm origin && git remote add origin https://"$CI_MIRROR_USERNAME":"$CI_MIRROR_PASSWORD"@github.com/$CI_PROJECT_PATH.git
    - git push origin HEAD:$CI_COMMIT_REF_NAME # Pushes to the same branch as the trigger
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
